buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.0'
    }
}

apply plugin: 'com.gradleup.shadow'
apply plugin: 'java'

group = 'io.github.greenmc'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = "jitpack"
        url 'https://jitpack.io'
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT")

    implementation("net.dv8tion:JDA:5.1.0") {
        exclude module: 'opus-java'
    }
    implementation("com.github.Despical:Commons:1.8.1") {
        exclude module: 'HikariCP'
    }
    compileOnly fileTree('libs')

    compileOnly 'me.clip:placeholderapi:2.11.6'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

shadowJar {
    archiveBaseName.set('DragonEvent')
    archiveClassifier.set('')
    archiveVersion.set('')

    dependencies {

        relocate 'com.fasterxml', 'io.github.greenmc.dragonevent.internal.fasterxml'
        relocate 'com.google', 'io.github.greenmc.dragonevent.internal.google'
        relocate 'google', 'io.github.greenmc.dragonevent.internal'
        relocate 'com.iwebpp', 'io.github.greenmc.dragonevent.internal.iwebpp'
        relocate 'com.neovisionaries', 'io.github.greenmc.dragonevent.internal.neovisionaries'
        relocate 'gnu', 'io.github.greenmc.dragonevent.internal.gnu'
        relocate 'kotlin', 'io.github.greenmc.dragonevent.internal.kotlin'
        relocate 'javax', 'io.github.greenmc.dragonevent.internal.javax'
        relocate 'me.despical.commons', 'io.github.greenmc.dragonevent.internal.commons'
        relocate 'net.bytebuddy', 'io.github.greenmc.dragonevent.internal.bytebuddy'
        relocate 'net.dv8tion', 'io.github.greenmc.dragonevent.internal.dv8tion'
        relocate 'okhttp3', 'io.github.greenmc.dragonevent.internal.okhttp3'
        relocate 'okio', 'io.github.greenmc.dragonevent.internal.okio'
        relocate 'org.apache', 'io.github.greenmc.dragonevent.internal.apache'
        relocate 'org.intellij', 'io.github.greenmc.dragonevent.internal.intellij'
        relocate 'org.jetbrains', 'io.github.greenmc.dragonevent.internal.jetbrains'
        relocate 'org.slf4j', 'io.github.greenmc.dragonevent.internal.slf4j'
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
